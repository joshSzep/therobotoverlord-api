"""Tests for DashboardService."""

from datetime import datetime
from datetime import timezone
from unittest.mock import AsyncMock
from unittest.mock import MagicMock
from unittest.mock import patch
from uuid import uuid4

import pytest

from therobotoverlord_api.database.models.admin_action import AdminActionType
from therobotoverlord_api.database.models.base import UserRole
from therobotoverlord_api.database.models.system_announcement import AnnouncementCreate
from therobotoverlord_api.database.models.system_announcement import AnnouncementType
from therobotoverlord_api.services.dashboard_service import DashboardService


class TestDashboardService:
    """Test class for DashboardService."""

    @pytest.fixture
    @patch("therobotoverlord_api.services.dashboard_service.UserService")
    @patch("therobotoverlord_api.services.dashboard_service.SanctionService")
    @patch("therobotoverlord_api.services.dashboard_service.FlagService")
    @patch("therobotoverlord_api.services.dashboard_service.AppealService")
    @patch("therobotoverlord_api.services.dashboard_service.QueueService")
    @patch("therobotoverlord_api.services.dashboard_service.LoyaltyScoreService")
    @patch("therobotoverlord_api.services.dashboard_service.LeaderboardService")
    def service(self, mock_leaderboard, mock_loyalty, mock_queue, mock_appeal, mock_flag, mock_sanction, mock_user):
        """Create DashboardService instance with mocked dependencies."""
        return DashboardService()

    @pytest.fixture
    def mock_user_service(self):
        """Mock UserService."""
        service = AsyncMock()
        service.get_user_count.return_value = 100
        service.get_active_user_count.return_value = 50
        service.get_new_user_count.return_value = 10
        return service

    @pytest.fixture
    def mock_sanction_service(self):
        """Mock SanctionService."""
        service = AsyncMock()
        service.get_active_sanction_count.return_value = 5
        service.get_recent_sanction_count.return_value = 2
        return service

    @pytest.fixture
    def mock_flag_service(self):
        """Mock FlagService."""
        service = AsyncMock()
        service.get_pending_flag_count.return_value = 15
        service.get_recent_flag_count.return_value = 8
        return service

    @pytest.fixture
    def mock_appeal_service(self):
        """Mock AppealService."""
        service = AsyncMock()
        service.get_pending_appeal_count.return_value = 3
        service.get_recent_appeal_count.return_value = 1
        return service

    @pytest.fixture
    def mock_queue_service(self):
        """Mock QueueService."""
        service = AsyncMock()
        service.get_queue_overview.return_value = {
            "total_items": 25,
            "pending_items": 20,
            "in_progress_items": 5,
        }
        return service

    @pytest.fixture
    def mock_loyalty_service(self):
        """Mock LoyaltyScoreService."""
        service = AsyncMock()
        service.get_average_loyalty_score.return_value = 75.5
        return service

    @pytest.fixture
    def mock_leaderboard_service(self):
        """Mock LeaderboardService."""
        service = AsyncMock()
        service.get_top_users.return_value = [
            {"user_pk": uuid4(), "username": "user1", "score": 100},
            {"user_pk": uuid4(), "username": "user2", "score": 95},
        ]
        return service

    @pytest.fixture
    def mock_redis_client(self):
        """Mock Redis client."""
        client = AsyncMock()
        client.get.return_value = None
        client.setex.return_value = True
        return client

    @pytest.fixture
    def mock_repositories(self):
        """Mock all repositories."""
        admin_action_repo = AsyncMock()
        dashboard_repo = AsyncMock()
        announcement_repo = AsyncMock()

        admin_action_repo.create.return_value = MagicMock(pk=uuid4())
        admin_action_repo.get_recent_actions.return_value = []

        announcement_repo.create_announcement.return_value = MagicMock(
            pk=uuid4(),
            title="Test Announcement",
            content="Test content",
            announcement_type=AnnouncementType.GENERAL,
        )
        announcement_repo.get_active_announcements.return_value = []

        return {
            "admin_action": admin_action_repo,
            "dashboard": dashboard_repo,
            "announcement": announcement_repo,
        }

    @pytest.mark.asyncio
    @patch("therobotoverlord_api.services.dashboard_service.get_redis_client")
    @patch("therobotoverlord_api.services.dashboard_service.UserService")
    @patch("therobotoverlord_api.services.dashboard_service.SanctionService")
    @patch("therobotoverlord_api.services.dashboard_service.FlagService")
    @patch("therobotoverlord_api.services.dashboard_service.AppealService")
    @patch("therobotoverlord_api.services.dashboard_service.QueueService")
    @patch("therobotoverlord_api.services.dashboard_service.LoyaltyScoreService")
    @patch("therobotoverlord_api.services.dashboard_service.LeaderboardService")
    async def test_get_dashboard_overview_cached(
        self,
        mock_leaderboard_service_class,
        mock_loyalty_service_class,
        mock_queue_service_class,
        mock_appeal_service_class,
        mock_flag_service_class,
        mock_sanction_service_class,
        mock_user_service_class,
        mock_get_redis_client,
        service,
        mock_redis_client,
    ):
        """Test getting dashboard overview from cache."""
        cached_data = {
            "user_activity": {"total_users": 100, "active_users": 50},
            "content_activity": {"total_posts": 200, "total_topics": 50},
            "moderation_activity": {"pending_flags": 15, "active_sanctions": 5},
            "system_health": {"queue_items": 25, "avg_loyalty_score": 75.5},
            "recent_activity": [],
        }

        mock_redis_client.get.return_value = str(cached_data).encode()
        mock_get_redis_client.return_value = mock_redis_client

        result = await service.get_dashboard_overview("24h")

        assert result is not None
        mock_redis_client.get.assert_called_once()

    @pytest.mark.asyncio
    @patch("therobotoverlord_api.services.dashboard_service.get_redis_client")
    @patch("therobotoverlord_api.services.dashboard_service.UserService")
    @patch("therobotoverlord_api.services.dashboard_service.SanctionService")
    @patch("therobotoverlord_api.services.dashboard_service.FlagService")
    @patch("therobotoverlord_api.services.dashboard_service.AppealService")
    @patch("therobotoverlord_api.services.dashboard_service.QueueService")
    @patch("therobotoverlord_api.services.dashboard_service.LoyaltyScoreService")
    @patch("therobotoverlord_api.services.dashboard_service.LeaderboardService")
    @patch("therobotoverlord_api.services.dashboard_service.AdminActionRepository")
    async def test_get_dashboard_overview_not_cached(
        self,
        mock_admin_action_repo_class,
        mock_leaderboard_service_class,
        mock_loyalty_service_class,
        mock_queue_service_class,
        mock_appeal_service_class,
        mock_flag_service_class,
        mock_sanction_service_class,
        mock_user_service_class,
        mock_get_redis_client,
        service,
        mock_redis_client,
        mock_user_service,
        mock_sanction_service,
        mock_flag_service,
        mock_appeal_service,
        mock_queue_service,
        mock_loyalty_service,
        mock_leaderboard_service,
        mock_repositories,
    ):
        """Test getting dashboard overview when not cached."""
        mock_redis_client.get.return_value = None
        mock_get_redis_client.return_value = mock_redis_client

        # Mock service classes
        mock_user_service_class.return_value = mock_user_service
        mock_sanction_service_class.return_value = mock_sanction_service
        mock_flag_service_class.return_value = mock_flag_service
        mock_appeal_service_class.return_value = mock_appeal_service
        mock_queue_service_class.return_value = mock_queue_service
        mock_loyalty_service_class.return_value = mock_loyalty_service
        mock_leaderboard_service_class.return_value = mock_leaderboard_service
        mock_admin_action_repo_class.return_value = mock_repositories["admin_action"]

        result = await service.get_dashboard_overview("24h")

        assert result is not None
        assert "user_activity" in result
        assert "content_activity" in result
        assert "moderation_activity" in result
        assert "system_health" in result
        assert "recent_activity" in result

        mock_redis_client.get.assert_called_once()
        mock_redis_client.setex.assert_called_once()

    @pytest.mark.asyncio
    @patch("therobotoverlord_api.services.dashboard_service.AdminActionRepository")
    async def test_log_admin_action(
        self, mock_admin_action_repo_class, service, mock_repositories
    ):
        """Test logging admin action."""
        mock_admin_action_repo_class.return_value = mock_repositories["admin_action"]

        admin_pk = uuid4()
        action_type = AdminActionType.USER_ROLE_CHANGE
        description = "Test action"

        result = await service.log_admin_action(
            admin_pk=admin_pk,
            action_type=action_type,
            description=description,
        )

        assert result is not None
        mock_repositories["admin_action"].create.assert_called_once()

    @pytest.mark.asyncio
    @patch("therobotoverlord_api.services.dashboard_service.SystemAnnouncementRepository")
    async def test_create_announcement(
        self, mock_announcement_repo_class, service, mock_repositories
    ):
        """Test creating system announcement."""
        mock_announcement_repo_class.return_value = mock_repositories["announcement"]

        announcement_data = AnnouncementCreate(
            title="Test Announcement",
            content="Test content",
            announcement_type=AnnouncementType.GENERAL,
            target_roles=[UserRole.CITIZEN],
        )
        created_by_pk = uuid4()

        result = await service.create_announcement(announcement_data, created_by_pk)

        assert result is not None
        mock_repositories["announcement"].create_announcement.assert_called_once_with(
            announcement_data, created_by_pk
        )

    @pytest.mark.asyncio
    @patch("therobotoverlord_api.services.dashboard_service.SystemAnnouncementRepository")
    async def test_get_announcements(
        self, mock_announcement_repo_class, service, mock_repositories
    ):
        """Test getting system announcements."""
        mock_announcement_repo_class.return_value = mock_repositories["announcement"]

        result = await service.get_announcements(active_only=True)

        assert result == []
        mock_repositories["announcement"].get_active_announcements.assert_called_once()

    @pytest.mark.asyncio
    @patch("therobotoverlord_api.services.dashboard_service.AdminActionRepository")
    async def test_get_audit_log(
        self, mock_admin_action_repo_class, service, mock_repositories
    ):
        """Test getting audit log."""
        mock_admin_action_repo_class.return_value = mock_repositories["admin_action"]

        result = await service.get_audit_log(limit=10, offset=0)

        assert result == []
        mock_repositories["admin_action"].get_recent_actions.assert_called_once_with(
            limit=10, offset=0
        )

    @pytest.mark.asyncio
    async def test_parse_period_24h(self, service):
        """Test parsing 24h period."""
        start_time, end_time = service._parse_period("24h")

        assert start_time is not None
        assert end_time is not None
        assert end_time > start_time

    @pytest.mark.asyncio
    async def test_parse_period_7d(self, service):
        """Test parsing 7d period."""
        start_time, end_time = service._parse_period("7d")

        assert start_time is not None
        assert end_time is not None
        assert end_time > start_time

    @pytest.mark.asyncio
    async def test_parse_period_30d(self, service):
        """Test parsing 30d period."""
        start_time, end_time = service._parse_period("30d")

        assert start_time is not None
        assert end_time is not None
        assert end_time > start_time

    @pytest.mark.asyncio
    async def test_parse_period_invalid(self, service):
        """Test parsing invalid period defaults to 24h."""
        start_time, end_time = service._parse_period("invalid")

        assert start_time is not None
        assert end_time is not None
        assert end_time > start_time

    @pytest.mark.asyncio
    @patch("therobotoverlord_api.services.dashboard_service.UserService")
    async def test_get_user_metrics(self, mock_user_service_class, service, mock_user_service):
        """Test getting user metrics."""
        mock_user_service_class.return_value = mock_user_service

        start_time = datetime.now(timezone.utc)
        end_time = datetime.now(timezone.utc)

        result = await service._get_user_metrics(start_time, end_time)

        assert "total_users" in result
        assert "active_users" in result
        assert "new_users" in result
        assert result["total_users"] == 100
        assert result["active_users"] == 50
        assert result["new_users"] == 10

    @pytest.mark.asyncio
    @patch("therobotoverlord_api.services.dashboard_service.SanctionService")
    @patch("therobotoverlord_api.services.dashboard_service.FlagService")
    @patch("therobotoverlord_api.services.dashboard_service.AppealService")
    async def test_get_moderation_metrics(
        self,
        mock_appeal_service_class,
        mock_flag_service_class,
        mock_sanction_service_class,
        service,
        mock_sanction_service,
        mock_flag_service,
        mock_appeal_service,
    ):
        """Test getting moderation metrics."""
        mock_sanction_service_class.return_value = mock_sanction_service
        mock_flag_service_class.return_value = mock_flag_service
        mock_appeal_service_class.return_value = mock_appeal_service

        start_time = datetime.now(timezone.utc)
        end_time = datetime.now(timezone.utc)

        result = await service._get_moderation_metrics(start_time, end_time)

        assert "pending_flags" in result
        assert "active_sanctions" in result
        assert "pending_appeals" in result
        assert result["pending_flags"] == 15
        assert result["active_sanctions"] == 5
        assert result["pending_appeals"] == 3

    @pytest.mark.asyncio
    @patch("therobotoverlord_api.services.dashboard_service.QueueService")
    @patch("therobotoverlord_api.services.dashboard_service.LoyaltyScoreService")
    async def test_get_system_health_metrics(
        self,
        mock_loyalty_service_class,
        mock_queue_service_class,
        service,
        mock_queue_service,
        mock_loyalty_service,
    ):
        """Test getting system health metrics."""
        mock_queue_service_class.return_value = mock_queue_service
        mock_loyalty_service_class.return_value = mock_loyalty_service

        result = await service._get_system_health_metrics()

        assert "queue_items" in result
        assert "avg_loyalty_score" in result
        assert result["queue_items"] == 25
        assert result["avg_loyalty_score"] == 75.5
